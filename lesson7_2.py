# Напишите класс PersonInfo
# Экземпляр класса создается из следующих атрибутов:
# 1. Строка - "Имя Фамилия"
# 2. Число - возраст сотрудника
# 3. Подразделения от головного до того, где работает сотрудник.
# Реализуйте методы класса:
# 1. short_name, который возвращает строку Фамилия И.
# 2. path_deps, возвращает путь "Головное подразделение --> ... --> Конечное подразделение"
# 3. new_salary, Директор решил проиндексировать зарплаты, и новая зарплата теперь вычисляет по формуле:
# 1337*Возраст*суммарное кол-во вхождений трех наиболее часто встречающихся букв из списка подразделений
# (регистр имеет значение "А" и "а" - разные буквы)
# Например (Ввод --> Вывод) :
# PersonInfo('Александр Шленский',
#            32,
#            'Разработка', 'УК', 'Автотесты').short_name() --> 'Шленский А.'
# PersonInfo('Александр Шленский',
#            32,
#            'Разработка', 'УК', 'Автотесты').path_deps() -->
#            'Разработка --> УК --> Автотесты'
# PersonInfo('Александр Шленский', 32, 'Разработка', 'УК', 'Автотесты').new_salary() --> 385056 т.к.
# т.к. буква "т" встречается 4 раза, "а" 3 раза, 'о' 2 раза, остальные по одной. Сумма трёх самых частых букв 4+3+2 = 9.
# 1337*32*9 = 385056

# Здесь пишем код
class PersonInfo:
    """
    Класс, состоящий из данных по сотрудникам
    """
    def __init__(self, name: str, age: int, *dep):
        """
        Метод инициализирует характеристики: имя, возраст, подразделение
        :param name: строковое значение
        :param age: числовое значение
        :param dep: список из элементов строки
        """
        self.name = name
        self.age = age
        self.dep = dep

    def short_name(self):
        """
        Метод принимает в себя характеристики экземпляра класса
        :return: возвращает строку в формате "Фамилия И."
        """
        a = self.name.find(" ")  # найти индекс пробела
        b = self.name[(a + 1):] + " " + self.name[0] + "."  # взять срез от пробела до конца+первая буква имени
        return b

    def path_deps(self):
        """
        Метод принимает в себя характеристики экземпляра класса
        :return: возвращает путь "Головное подразделение --> ... --> Конечное подразделение"
        """
        return ' --> '.join(self.dep)  # соединить отделы через разделитель

    def new_salary(self):
        """
        Метод принимает в себя характеристику экземпляра класса
        :return: возвращает значение новой зарплаты по формуле
        """
        our_list = []
        our_str = ''.join(self.dep)  # соединить отделы через разделитель в строку
        our_dict = dict.fromkeys(our_str, 0)  # собрать словарь из строки с ключами 0
        for key in our_str:  # для итерации по ключам строки
            our_dict[key] += 1  # проиндексировав по ключам, записать в словарь значения кол-ва повторений каждой буквы
            # т.е. видим значение - прибавляем к аналогичному найденному
        for value in our_dict.values():  # для итерации по значениям получившегося словаря
            our_list.append(value)  # вписать в "конец" словаря получившееся значение
        our_list.sort()  # отсортировать по порядку возрастания чисел
        salary = 1337 * self.age * sum(our_list[::-1][:3])
        # расчет формуле: 1337*Возраст*суммарное кол-во вхождений трех наиболее часто встречающихся букв
        # из списка подразделений (регистр имеет значение "А" и "а" - разные буквы)

        return salary


# Ниже НИЧЕГО НЕ НАДО ИЗМЕНЯТЬ


first_person = PersonInfo('Александр Шленский', 32, 'Разработка', 'УК', 'Автотесты')
fourth_person = PersonInfo('Иван Иванов', 26, 'Разработка')
second_person = PersonInfo('Пётр Валерьев', 47, 'Разработка', 'УК')
third_person = PersonInfo('Макар Артуров', 51, 'Разработка', 'УК', 'Нефункциональное тестирование', 'Автотестирование')

data = [first_person.short_name,
        second_person.short_name,
        third_person.short_name,
        fourth_person.short_name,

        first_person.path_deps,
        second_person.path_deps,
        third_person.path_deps,
        fourth_person.path_deps,

        first_person.new_salary,
        second_person.new_salary,
        third_person.new_salary,
        fourth_person.new_salary
        ]


test_data = ['Шленский А.', 'Валерьев П.', 'Артуров М.', 'Иванов И.',

             'Разработка --> УК --> Автотесты',
             'Разработка --> УК',
             'Разработка --> УК --> Нефункциональное тестирование --> Автотестирование',
             'Разработка',
             385056, 314195, 1227366, 173810]

for i, d in enumerate(data):
    assert_error = f'Не прошла проверка для метода {d.__qualname__} экземпляра с атрибутами {d.__self__.__dict__}'
    assert d() == test_data[i], assert_error
    print(f'Набор для метода {d.__qualname__} экземпляра класса с атрибутами {d.__self__.__dict__} прошёл проверку')
print('Всё ок')
